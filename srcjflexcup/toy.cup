// plain symbols
terminal LPAR, COMMA, RPAR, SEMI, COLON;
terminal NOT, AND, OR;
terminal PLUS, MINUS, TIMES, DIV;
terminal LT, LE, GT, GE;
terminal ASSIGN, EQ, NE;

// type/statment symbols
terminal INT, BOOL, FLOAT, STRING;
terminal VOID;
terminal PROC, CORP;
terminal IF, THEN, ELIF, ELSE, FI;
terminal WHILE, DO, OD;
terminal READ, WRITE;

// value/id symbols
terminal         NULL, TRUE, FALSE;
terminal Integer INT_CONST;
terminal Float   FLOAT_CONST;
terminal String  STRING_CONST;
terminal String ID; // Integer?

// VarDeclList
nonterminal Program;
nonterminal VarDeclList, VarDecl;
nonterminal Type;
nonterminal IdListInit;
nonterminal ExprList, Expr;
nonterminal CallProc;

// ProcList
nonterminal ProcList, Proc;
nonterminal ParamDeclList, ParDecl, IdList;
nonterminal ResultTypeList, ResultType;
nonterminal ReturnExprs;
nonterminal StatList, Stat;
nonterminal IfStat, ElifList, Elif, Else;
nonterminal WhileStat;
nonterminal ReadStat;
nonterminal WriteStat;
nonterminal AssignStat;

precedence left AND, OR;
precedence left LT, LE, GT, GE, EQ, NE;
precedence left TIMES, DIV, PLUS, MINUS;
precedence left NOT;

Program ::= VarDeclList ProcList;

// VarDeclList
VarDeclList ::= VarDecl VarDeclList | /*empty*/;
VarDecl ::= Type IdListInit SEMI;
Type ::= INT | BOOL | FLOAT | STRING;
IdListInit ::=                  ID |                  ID ASSIGN Expr
             | IdListInit COMMA ID | IdListInit COMMA ID ASSIGN Expr;

Expr ::= NULL | TRUE | FALSE | INT_CONST | FLOAT_CONST | STRING_CONST | ID
       | CallProc
       | Expr PLUS Expr | Expr MINUS Expr | Expr TIMES Expr | Expr DIV Expr
       | Expr AND Expr | Expr OR Expr | NOT Expr
       | Expr LT Expr | Expr LE Expr | Expr GT Expr | Expr GE Expr
       | Expr EQ Expr  //{: RESULT = new Double(1/p.doubleValue()); :}
       | Expr NE Expr
       | MINUS Expr;

CallProc ::= ID LPAR ExprList RPAR
           | ID LPAR          RPAR;
ExprList ::= Expr COMMA ExprList | Expr;

// ProcList
ProcList ::= Proc ProcList | Proc;
Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI
       | PROC ID LPAR               RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI;
ParamDeclList ::= ParamDeclList SEMI ParDecl | ParDecl;
ParDecl ::= Type IdList;
IdList ::= IdList COMMA ID | ID;

ResultTypeList ::= ResultType COMMA ResultTypeList | ResultType;
ResultType ::= Type | VOID;
ReturnExprs ::=  ExprList | /* empty */;

StatList ::= Stat StatList | Stat;
Stat ::= IfStat SEMI | WhileStat SEMI | AssignStat SEMI
       | CallProc SEMI | ReadStat SEMI | WriteStat SEMI | /* empty */;
IfStat   ::= IF Expr THEN StatList ElifList Else FI;
ElifList ::= Elif ElifList | /* empty */;
Elif     ::= ELIF Expr THEN StatList;
Else     ::= ELSE StatList | /* empty */;
WhileStat ::= WHILE StatList Expr DO StatList OD
            | WHILE Expr DO StatList OD;
ReadStat ::= READ LPAR IdList RPAR;
WriteStat  ::= WRITE LPAR ExprList RPAR;
AssignStat ::= IdList ASSIGN ExprList;
CallProc ::= ID LPAR ExprList RPAR
           | ID LPAR          RPAR;
